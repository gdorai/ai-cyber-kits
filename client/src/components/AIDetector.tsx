import { useState } from "react";
import { useMutation } from "@tanstack/react-query";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Sparkles, TrendingUp, FileText } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { apiRequest } from "@/lib/queryClient";
import type { AIDetectionResponse } from "@shared/schema";
import { useToast } from "@/hooks/use-toast";

export function AIDetector() {
  const [text, setText] = useState("");
  const { toast } = useToast();

  const detectMutation = useMutation({
    mutationFn: async (text: string) => {
      const response = await apiRequest<AIDetectionResponse>("/api/detect-ai", {
        method: "POST",
        body: JSON.stringify({ text }),
        headers: { "Content-Type": "application/json" },
      });
      return response;
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const handleDetect = () => {
    if (!text.trim()) return;
    detectMutation.mutate(text);
  };

  const handleReset = () => {
    setText("");
    detectMutation.reset();
  };

  const results = detectMutation.data;
  const isLoading = detectMutation.isPending;

  const getConfidenceColor = (confidence: string) => {
    if (confidence === "High") return "text-chart-2";
    if (confidence === "Medium") return "text-chart-3";
    return "text-chart-5";
  };

  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-3xl md:text-4xl font-semibold mb-4">
          AI Text Detector
        </h2>
        <p className="text-muted-foreground">
          Analyze text to detect whether it was likely generated by AI.
        </p>
      </div>

      <Card className="p-6 space-y-4">
        <div className="space-y-2">
          <label htmlFor="ai-text" className="text-sm font-medium">
            Text to Analyze
          </label>
          <Textarea
            id="ai-text"
            placeholder="Paste the text you want to check for AI generation..."
            value={text}
            onChange={(e) => setText(e.target.value)}
            rows={8}
            data-testid="input-ai-text"
          />
        </div>
        <div className="flex gap-2">
          <Button
            onClick={handleDetect}
            disabled={isLoading || !text.trim()}
            className="flex-1"
            data-testid="button-detect-ai"
          >
            {isLoading ? "Analyzing..." : "Detect AI"}
          </Button>
          {(text || results) && (
            <Button
              onClick={handleReset}
              variant="outline"
              disabled={isLoading}
              data-testid="button-reset-ai"
            >
              Reset
            </Button>
          )}
        </div>
      </Card>

      {results && (
        <Card className="p-6 space-y-6">
          <div className="text-center space-y-4">
            <div className="inline-flex items-center justify-center w-20 h-20 rounded-full bg-primary/10">
              <Sparkles className="w-10 h-10 text-primary" />
            </div>
            <div>
              <div className="text-5xl font-bold mb-2">{results.aiProbability}%</div>
              <p className="text-muted-foreground">Likely AI-Generated</p>
              <Badge className={`mt-2 ${getConfidenceColor(results.confidence)}`}>
                {results.confidence} Confidence
              </Badge>
            </div>
          </div>

          {results.indicators.length > 0 && (
            <div>
              <h3 className="text-xl font-semibold mb-4">Detection Indicators</h3>
              <div className="space-y-4">
                {results.indicators.map((indicator, idx: number) => (
                  <Card key={idx} className="p-4">
                    <div className="flex items-start gap-4">
                      <div className="w-10 h-10 rounded-lg bg-chart-4/10 flex items-center justify-center flex-shrink-0">
                        {idx === 0 && <FileText className="w-5 h-5 text-chart-4" />}
                        {idx === 1 && <TrendingUp className="w-5 h-5 text-chart-4" />}
                        {idx === 2 && <Sparkles className="w-5 h-5 text-chart-4" />}
                      </div>
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center justify-between gap-4 mb-2 flex-wrap">
                          <h4 className="font-semibold">{indicator.name}</h4>
                          <span className="text-sm font-medium">{indicator.score}%</span>
                        </div>
                        <div className="h-2 rounded-full overflow-hidden bg-muted mb-2">
                          <div
                            className="h-full bg-chart-4 transition-all duration-700"
                            style={{ width: `${indicator.score}%` }}
                          />
                        </div>
                        <p className="text-sm text-muted-foreground">{indicator.explanation}</p>
                      </div>
                    </div>
                  </Card>
                ))}
              </div>
            </div>
          )}
        </Card>
      )}
    </div>
  );
}
